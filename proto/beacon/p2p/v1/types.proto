syntax = "proto3";

package ethereum.beacon.p2p.v1;

import "proto/common/messages.proto";

message BeaconState {
  // Miscellaneous [1001-2000]
  uint64 genesis_time = 1001;
  Fork fork = 1002;
  uint64 slot = 1003;

  // Validator registry [2001-3000]
  repeated Validator validator_registry = 2001;
  // Balances in Gwei
  repeated uint64 balances = 2002;

  // Randomness and committees [3001-4000]
  repeated bytes latest_randao_mixes = 3001;
  uint64 latest_start_shard = 3002;

  // Finality [4001-5000]
  repeated PendingAttestation previous_epoch_attestations = 4001;
  repeated PendingAttestation current_epoch_attestations = 4002;
  uint64 previous_justified_epoch = 4003;
  uint64 current_justified_epoch = 4004;
  bytes previous_justified_root = 4005;
  bytes current_justified_root = 4006;
  uint64 justification_bitfield = 4007;
  uint64 finalized_epoch = 4008;
  bytes finalized_root = 4009;

  // Recent state [5001-6000]
  repeated Crosslink current_crosslinks = 5001;
  repeated Crosslink previous_crosslinks = 5002;
  repeated bytes latest_block_roots = 5003;
  repeated bytes latest_state_roots = 5004;
  repeated bytes latest_active_index_roots = 5005;
  repeated uint64 latest_slashed_balances = 5006;
  BeaconBlockHeader latest_block_header = 5007;
  repeated bytes historical_roots = 5008;
  BeaconBlock latest_block = 5009;

  // Ethereum 1.0 chain data [6001-7000]
  Eth1Data latest_eth1_data = 6001;
  repeated Eth1DataVote eth1_data_votes = 6002;
  uint64 deposit_index = 6003;

  // Deprecated [8001-9000]
  uint64 validator_registry_update_epoch = 8001;
  repeated uint64 validator_balances = 8002;
  uint64 previous_shuffling_start_shard = 8003;
  uint64 current_shuffling_start_shard = 8004;
  uint64 previous_shuffling_epoch = 8005;
  uint64 current_shuffling_epoch = 8006;
  bytes previous_shuffling_seed_hash32 = 8007;
  bytes current_shuffling_seed_hash32 = 8008;
  uint64 justified_epoch = 8009;
  bytes justified_root = 8010;
  repeated bytes latest_index_root_hash32s = 8011;
  repeated bytes latest_block_root_hash32s = 8012;
  repeated bytes batched_block_root_hash32s = 8013;
  repeated Crosslink latest_crosslinks = 8014;
  repeated PendingAttestation latest_attestations = 8015;
}

message Fork {
  uint64 previous_version = 1;
  uint64 current_version = 2;
  uint64 epoch = 3;
}

message PendingAttestation {
  AttestationData data = 1;
  bytes aggregation_bitfield = 2;
  bytes custody_bitfield = 3;
  uint64 inclusion_slot = 4;
}

message Attestation {
  AttestationData data = 1;
  bytes aggregation_bitfield = 2;
  bytes custody_bitfield = 3;
  bytes aggregate_signature = 4; // Type of [uint384] ?
}

message AttestationData {
  uint64 slot = 1;
  uint64 shard = 2;
  bytes beacon_block_root_hash32 = 3;
  bytes epoch_boundary_root_hash32  = 4;
  bytes crosslink_data_root_hash32 = 5;
  Crosslink latest_crosslink = 6;
  uint64 justified_epoch = 7;
  bytes justified_block_root_hash32 = 8;
}

message AttestationDataAndCustodyBit {
  AttestationData data = 1;
  bool custody_bit = 2;
}

message Validator {
  bytes pubkey = 1;
  // TODO(781): The usage of withdrawal_credentials is not defined in spec. Not used in Prysm yet.
  bytes withdrawal_credentials_hash32 = 2;
  uint64 activation_epoch = 5;
  uint64 exit_epoch = 6;
  uint64 withdrawal_epoch = 7;
  uint64 slashed_epoch = 8;
  // Possible validator status code:
  // https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md#constants
  enum StatusFlags {
    INITIAL = 0; // validator status initial value.
    INITIATED_EXIT = 1; // validator initiated exit.
    WITHDRAWABLE = 2; // validator deposit is withdrawable.
  }
  StatusFlags status_flags = 9;
}

message ShardReassignmentRecord {
  uint64 validator_index = 1;
  uint64 shard = 2;
  uint64 slot = 3;
}

message Crosslink {
  // Epoch number
  uint64 epoch = 1;
  // Root of the previous crosslink
  bytes previous_crosslink_root_hash32 = 2;
  // Root of the shard data since the previous crosslink
  bytes crosslink_data_root_hash32 = 3;
}

message BeaconBlock {
  uint64 slot = 1;
  bytes parent_root_hash32 = 2;
  bytes state_root_hash32 = 3;
  bytes randao_reveal = 4;
  Eth1Data eth1_data = 5;
  bytes signature = 6; // bytes96

  // Block Body
  BeaconBlockBody body = 7;
}

message BeaconBlockBody {
  repeated Attestation attestations = 1;
  repeated ProposerSlashing proposer_slashings  = 2;
  repeated AttesterSlashing attester_slashings = 3;
  repeated Deposit deposits = 4;
  repeated VoluntaryExit voluntary_exits = 5;
}

message DepositInput {
  bytes pubkey = 1;
  bytes proof_of_possession = 2; // Type of ['uint384']??
  // TODO(781): The usage of withdrawal_credentials is not defined in spec. Not used in Prysm yet.
  bytes withdrawal_credentials_hash32 = 3;
}

message ProposalSignedData {
  uint64 slot = 1;
  uint64 shard = 2;
  bytes block_root_hash32 = 3;
}

message SlashableAttestation {
  repeated uint64 validator_indices = 1;
  bytes custody_bitfield = 2;
  AttestationData data = 3;
  bytes aggregate_signature = 4; // bytes96
}

message DepositData {
  DepositInput deposit_input = 1;
  uint64 amount = 2; // Amount in Gwei
  uint64 timestamp = 3;
}

message ProposerSlashing {
  uint64 proposer_index = 1;
  ProposalSignedData proposal_data_1 = 2;
  bytes proposal_signature_1 = 3; // bytes96
  ProposalSignedData proposal_data_2 = 4;
  bytes proposal_signature_2 = 5;
}

message AttesterSlashing {
  SlashableAttestation slashable_attestation_1 = 1;
  SlashableAttestation slashable_attestation_2 = 2;
}

message Deposit {
  // Branch in the deposit tree
  repeated bytes proof = 1;
  // Index in the deposit tree
  uint64 index = 2;
  DepositData data = 3;
  // Deprecated
  // TODO(2307): Remove deprecated fields
  repeated bytes merkle_proof_hash32s = 1001;
  uint64 merkle_tree_index = 1002;
  bytes deposit_data = 1003;
}

message VoluntaryExit {
  uint64 epoch = 1;
  uint64 validator_index = 2;
  bytes signature = 3; // bytes96
}

message Eth1Data {
  // Root of the deposit tree
  bytes deposit_root = 1;
  // Total number of deposits
  uint64 deposit_count = 2;
  // Block hash
  bytes block_root = 3;

  // Deprecated
  // TODO(2307): Remove deprecated fields
  bytes deposit_root_hash32 = 1000 [deprecated=true];
  bytes block_hash32 = 1001 [deprecated=true];
}

message Eth1DataVote {
  Eth1Data eth1_data = 1;
  uint64 vote_count = 2;
}

message HistoricalBatch {
  repeated bytes block_roots = 1;
  repeated bytes state_roots = 2;
}

message BeaconBlockHeader {
  uint64 slot = 1;
  bytes previous_block_root = 2;
  bytes state_root = 3;
  bytes block_body_root = 4;
  bytes signature = 5; // bytes86
}
